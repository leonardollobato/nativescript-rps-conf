"use strict";
var session_view_model_1 = require("../session-page/session-view-model");
var fakeDataServiceModule = require("../../services/fake-data-service");
var vm;
var page;
function pageNavigatingTo(args) {
    page = args.object;
    var firstSession = loadFirstSessionViaFaker();
    vm = new session_view_model_1.SessionViewModel(firstSession);
    page.bindingContext = vm;
}
exports.pageNavigatingTo = pageNavigatingTo;
function toggleFavorite(args) {
    vm.toggleFavorite();
}
exports.toggleFavorite = toggleFavorite;
function toggleDescription(args) {
    var btn = args.object;
    var txtDesc = page.getViewById('txtDescription');
    var scroll = page.getViewById('scroll');
    if (btn.text === 'MORE') {
        btn.text = 'LESS';
        txtDesc.text = vm.description;
    }
    else {
        btn.text = 'MORE';
        txtDesc.text = vm.descriptionShort;
        scroll.scrollToVerticalOffset(0, false);
    }
}
exports.toggleDescription = toggleDescription;
function loadFirstSessionViaFaker() {
    var speakers = fakeDataServiceModule.generateSpeakers();
    var roomInfos = fakeDataServiceModule.generateRoomInfos();
    var sessions = fakeDataServiceModule.generateSessions(speakers, roomInfos);
    var nonBreakSessions = sessions.filter(function (s) {
        return !s.isBreak && s.speakers.length > 0;
    });
    return nonBreakSessions[0];
}
exports.loadFirstSessionViaFaker = loadFirstSessionViaFaker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2Vzc2lvbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFLQSx5RUFBc0U7QUFFdEUsd0VBQTBFO0FBRTFFLElBQUksRUFBb0IsQ0FBQztBQUN6QixJQUFJLElBQVUsQ0FBQztBQUVmLDBCQUFpQyxJQUFJO0lBQ2pDLElBQUksR0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRTFCLElBQUksWUFBWSxHQUFHLHdCQUF3QixFQUFFLENBQUM7SUFDOUMsRUFBRSxHQUFHLElBQUkscUNBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQU5ELDRDQU1DO0FBRUQsd0JBQStCLElBQUk7SUFDL0IsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3hCLENBQUM7QUFGRCx3Q0FFQztBQUVELDJCQUFrQyxJQUFlO0lBQzdDLElBQUksR0FBRyxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDOUIsSUFBSSxPQUFPLEdBQVUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3hELElBQUksTUFBTSxHQUFlLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFcEQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQztJQUNsQyxDQUFDO0lBQ0QsSUFBSSxDQUFDLENBQUM7UUFDRixHQUFHLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztRQUNsQixPQUFPLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNuQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7QUFDTCxDQUFDO0FBZEQsOENBY0M7QUFFRDtJQUNJLElBQUksUUFBUSxHQUFHLHFCQUFxQixDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDeEQsSUFBSSxTQUFTLEdBQUcscUJBQXFCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMxRCxJQUFJLFFBQVEsR0FBUSxxQkFBcUIsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDaEYsSUFBSSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBUkQsNERBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlIH0gZnJvbSAndWkvcGFnZSc7XG5pbXBvcnQgeyBFdmVudERhdGEgfSBmcm9tICdkYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAndWkvYnV0dG9uJztcbmltcG9ydCB7IExhYmVsIH0gZnJvbSAndWkvbGFiZWwnO1xuaW1wb3J0IHsgU2Nyb2xsVmlldyB9IGZyb20gJ3VpL3Njcm9sbC12aWV3JztcbmltcG9ydCB7IFNlc3Npb25WaWV3TW9kZWwgfSBmcm9tICcuLi9zZXNzaW9uLXBhZ2Uvc2Vzc2lvbi12aWV3LW1vZGVsJztcblxuaW1wb3J0ICogYXMgZmFrZURhdGFTZXJ2aWNlTW9kdWxlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2Zha2UtZGF0YS1zZXJ2aWNlJztcblxudmFyIHZtOiBTZXNzaW9uVmlld01vZGVsO1xudmFyIHBhZ2U6IFBhZ2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWdlTmF2aWdhdGluZ1RvKGFyZ3Mpe1xuICAgIHBhZ2UgPSA8UGFnZT4gYXJncy5vYmplY3Q7XG5cbiAgICB2YXIgZmlyc3RTZXNzaW9uID0gbG9hZEZpcnN0U2Vzc2lvblZpYUZha2VyKCk7XG4gICAgdm0gPSBuZXcgU2Vzc2lvblZpZXdNb2RlbChmaXJzdFNlc3Npb24pO1xuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZUZhdm9yaXRlKGFyZ3Mpe1xuICAgIHZtLnRvZ2dsZUZhdm9yaXRlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVEZXNjcmlwdGlvbihhcmdzOiBFdmVudERhdGEpIHtcbiAgICB2YXIgYnRuID0gPEJ1dHRvbj5hcmdzLm9iamVjdDtcbiAgICB2YXIgdHh0RGVzYyA9IDxMYWJlbD5wYWdlLmdldFZpZXdCeUlkKCd0eHREZXNjcmlwdGlvbicpO1xuICAgIHZhciBzY3JvbGwgPSA8U2Nyb2xsVmlldz5wYWdlLmdldFZpZXdCeUlkKCdzY3JvbGwnKTtcblxuICAgIGlmIChidG4udGV4dCA9PT0gJ01PUkUnKSB7XG4gICAgICAgIGJ0bi50ZXh0ID0gJ0xFU1MnO1xuICAgICAgICB0eHREZXNjLnRleHQgPSB2bS5kZXNjcmlwdGlvbjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJ0bi50ZXh0ID0gJ01PUkUnO1xuICAgICAgICB0eHREZXNjLnRleHQgPSB2bS5kZXNjcmlwdGlvblNob3J0O1xuICAgICAgICBzY3JvbGwuc2Nyb2xsVG9WZXJ0aWNhbE9mZnNldCgwLCBmYWxzZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEZpcnN0U2Vzc2lvblZpYUZha2VyPFQ+KCl7XG4gICAgbGV0IHNwZWFrZXJzID0gZmFrZURhdGFTZXJ2aWNlTW9kdWxlLmdlbmVyYXRlU3BlYWtlcnMoKTtcbiAgICBsZXQgcm9vbUluZm9zID0gZmFrZURhdGFTZXJ2aWNlTW9kdWxlLmdlbmVyYXRlUm9vbUluZm9zKCk7XG4gICAgbGV0IHNlc3Npb25zID0gPGFueT5mYWtlRGF0YVNlcnZpY2VNb2R1bGUuZ2VuZXJhdGVTZXNzaW9ucyhzcGVha2Vycywgcm9vbUluZm9zKTtcbiAgICB2YXIgbm9uQnJlYWtTZXNzaW9ucyA9IHNlc3Npb25zLmZpbHRlcihzID0+IHtcbiAgICAgICAgcmV0dXJuICFzLmlzQnJlYWsgJiYgcy5zcGVha2Vycy5sZW5ndGggPiAwO1xuICAgIH0pO1xuICAgIHJldHVybiBub25CcmVha1Nlc3Npb25zWzBdO1xufSJdfQ==